<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Golang island</title>
    <link>https://www.golangi.net/post/</link>
    <description>Recent content in Posts on Golang island</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.golangi.net/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Error interface and error handling</title>
      <link>https://www.golangi.net/post/error-interface-and-error-handling/</link>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/error-interface-and-error-handling/</guid>
      <description>Error handling in the Go language is not quite the same as in other languages. It treats errors as a value. There is more emphasis on determining errors and handling them, rather than catching them directly with a catch
 Error interface The Go language treats errors as a special value and does not support the use of try/catch to catch exceptions.
The Go language uses an interface called error to represent error types.</description>
    </item>
    
    <item>
      <title>How to use go-humanize</title>
      <link>https://www.golangi.net/post/how-to-use-go-humanize/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/how-to-use-go-humanize/</guid>
      <description>Late at night, I will open the computer and study some open source projects, not recently in the research found an open source project to use a very good Go language library: go-humanize.
This is a &amp;ldquo;humanize&amp;rdquo; Go language library, the meaning of humanize is not to describe the Go language library, but the Go language library to achieve the function, it can convert the number, time, capacity, etc. into our human easy to understand words, such as the capacity of the hard disk is 82854982 bytes, we can not understand very well, but if the capacity is 83M, then it is good to understand, go-humanize does this thing.</description>
    </item>
    
    <item>
      <title>A few must-have Golang tricks</title>
      <link>https://www.golangi.net/post/a-few-must-have-golang-tricks/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/a-few-must-have-golang-tricks/</guid>
      <description>Go is a very good programming language. It is a language that allows you to really focus on your business and not have to worry too much about the program itself, so you can write applications as quickly as possible. For example, it has a relatively complete ecosystem that can provide you with everything you need to get started.
But then, it&amp;rsquo;s not a panacea, and there are some things we need to be aware of.</description>
    </item>
    
    <item>
      <title>Command Line Usage of GoLang-flag package</title>
      <link>https://www.golangi.net/post/command-line-usage-of-golang_flag-package/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/command-line-usage-of-golang_flag-package/</guid>
      <description>The Golang handles command line arguments by using the flag package from the standard library.
Package flag implements command-line flag parsing
http://golang.org/pkg/flag/
http://golang.org/pkg/
 A few notes define the flags to be used in the command line by flag.String(), Bool(), Int(), etc.
 after defining the flag, call flag.Parse() to parse the command line parameters. the format of command line arguments can be  use Where parameters of boolean type prevent ambiguity in parsing and should be specified using an equal sign.</description>
    </item>
    
  </channel>
</rss>
