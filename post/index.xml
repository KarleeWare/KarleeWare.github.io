<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Golang island</title>
    <link>https://www.golangi.net/post/</link>
    <description>Recent content in Posts on Golang island</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 05 May 2022 14:36:13 +0800</lastBuildDate><atom:link href="https://www.golangi.net/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Best Practice of Handling Go Error</title>
      <link>https://www.golangi.net/post/the-best-practice-of-handling-go-error/</link>
      <pubDate>Thu, 05 May 2022 14:36:13 +0800</pubDate>
      
      <guid>https://www.golangi.net/post/the-best-practice-of-handling-go-error/</guid>
      <description>Today we share best practices for error handling in the Golang, learn about the current shortcomings of errors, compromises, and considerations when using them.
 What is error As you know, error is an interface type embedded in the source code. According to the export principle, only uppercase ones can be referenced by other source code packages, but error is predeclared identifiers and is not a keyword.
1 2 3 4 5  // The error built-in interface type is the conventional interface for // representing an error condition, with the nil value representing no error.</description>
    </item>
    
    <item>
      <title>How to Use the Go Timer</title>
      <link>https://www.golangi.net/post/how-to-use-the-go-timer/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/how-to-use-the-go-timer/</guid>
      <description>In general, many times we are faced with a situation where we need to run a time recorder that constantly shows us the current time or keeps executing a certain amount of code peacefully for a given time interval, in this case we should use Ticker, to use this we need to use the time package of the Golang, we have a method called NewTicker(). It allows us to stop and start the time code, we need to create a code channel by passing chan and bool as parameters that will be used to check if it is open, if the channel is open means that the timer will continue.</description>
    </item>
    
    <item>
      <title>Why Does Go Like to Use []byte</title>
      <link>https://www.golangi.net/post/why-does-go-like-to-use-byte/</link>
      <pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/why-does-go-like-to-use-byte/</guid>
      <description>There is no inheritance in Go, so to further analyze the byte type, you need to know more about the type keyword.
 Learn more about type keywords When we write code, the keyword type is mandatory for defining structs. For example: type Student struct,In addition to defining your own structs, type  also supports redefining existing types. For example: type String string
 What are the benefits of doing this?</description>
    </item>
    
    <item>
      <title>Go Compile Time Addressing Issues</title>
      <link>https://www.golangi.net/post/go-compile-time-addressing-issues/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/go-compile-time-addressing-issues/</guid>
      <description>“cannot take the address of XXX” and “cannot call pointer method on XXX”
 Demo Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67  package main type B struct { Id int } func New() B { return B{} } func New2() *B { return &amp;amp;B{} } func (b *B) Hello() { return } func (b B) World() { return } func main() { // The receiver of the method is of type *T  New().</description>
    </item>
    
    <item>
      <title>Go Will Support the Pdqsort in Next Version</title>
      <link>https://www.golangi.net/post/go-will-support-the-pdqsort-in-next-version/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/go-will-support-the-pdqsort-in-next-version/</guid>
      <description>According to Go&amp;rsquo;s commit https://github.com/golang/go/commit/72e77a7f41bbf45d466119444307fd3ae996e257 , it plans to use pdqsort, a well-known fast sorting algorithm, in its next release, and according to the commit information, the author of this commit is an employee from ByteDance
 The developer describes the pdqsort algorithm in the commit as follows:
 In all benchmark tests, pdqsort was never significantly slower than the previous algorithm In common mode, pdqsort is usually faster (i.</description>
    </item>
    
    <item>
      <title>Go Mod Import Local Packages</title>
      <link>https://www.golangi.net/post/go-mod-import-local-packages/</link>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/go-mod-import-local-packages/</guid>
      <description>For a project, it is not possible to write all the code yourself.
So it involves bringing in other people&amp;rsquo;s code and effectively avoiding duplicating the wheel, which is also called package introduction in Go.
After the birth of the Go language, there has been no official package management tool for many upgrades.
It was only in version 1.11 that go module, the official management tool, appeared.
So now most of the new Go projects are using go module for package management.</description>
    </item>
    
    <item>
      <title>Gin Uses Joniter to Bind the Json Request Body</title>
      <link>https://www.golangi.net/post/gin-uses-joniter-to-bind-the-json-request-body/</link>
      <pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/gin-uses-joniter-to-bind-the-json-request-body/</guid>
      <description>In the Gin framework, the standard package encoding/json is used by default when handling parameter bindings in JSON format, however, the standard package cannot meet some of our requirements, such as compatibility with integers, strings, PHP null arrays, time formats, etc.
 The easiest way When developing the API, you need to use ShouldBindJSON to bind the incoming parameters to the structure.
1 2 3 4  // ShouldBindJSON is a shortcut for c.</description>
    </item>
    
    <item>
      <title>Error interface and error handling</title>
      <link>https://www.golangi.net/post/error-interface-and-error-handling/</link>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/error-interface-and-error-handling/</guid>
      <description>Error handling in the Go language is not quite the same as in other languages. It treats errors as a value. There is more emphasis on determining errors and handling them, rather than catching them directly with a catch
 Error interface The Go language treats errors as a special value and does not support the use of try/catch to catch exceptions.
The Go language uses an interface called error to represent error types.</description>
    </item>
    
    <item>
      <title>How to use go-humanize</title>
      <link>https://www.golangi.net/post/how-to-use-go-humanize/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/how-to-use-go-humanize/</guid>
      <description>Late at night, I will open the computer and study some open source projects, not recently in the research found an open source project to use a very good Go language library: go-humanize.
This is a &amp;ldquo;humanize&amp;rdquo; Go language library, the meaning of humanize is not to describe the Go language library, but the Go language library to achieve the function, it can convert the number, time, capacity, etc. into our human easy to understand words, such as the capacity of the hard disk is 82854982 bytes, we can not understand very well, but if the capacity is 83M, then it is good to understand, go-humanize does this thing.</description>
    </item>
    
    <item>
      <title>A few must-have Golang tricks</title>
      <link>https://www.golangi.net/post/a-few-must-have-golang-tricks/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/a-few-must-have-golang-tricks/</guid>
      <description>Go is a very good programming language. It is a language that allows you to really focus on your business and not have to worry too much about the program itself, so you can write applications as quickly as possible. For example, it has a relatively complete ecosystem that can provide you with everything you need to get started.
But then, it&amp;rsquo;s not a panacea, and there are some things we need to be aware of.</description>
    </item>
    
    <item>
      <title>Command Line Usage of GoLang-flag package</title>
      <link>https://www.golangi.net/post/command-line-usage-of-golang_flag-package/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.golangi.net/post/command-line-usage-of-golang_flag-package/</guid>
      <description>The Golang handles command line arguments by using the flag package from the standard library.
Package flag implements command-line flag parsing
http://golang.org/pkg/flag/
http://golang.org/pkg/
 A few notes define the flags to be used in the command line by flag.String(), Bool(), Int(), etc.
 after defining the flag, call flag.Parse() to parse the command line parameters. the format of command line arguments can be  use Where parameters of boolean type prevent ambiguity in parsing and should be specified using an equal sign.</description>
    </item>
    
  </channel>
</rss>
